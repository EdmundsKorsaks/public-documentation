name: Generate dev documentation

on:
  push:
    branches:
      - dev

jobs:
  build_docs:
    name: Generate dev documentation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8 ]
        ruby-version: [ 3.0 ]
        node-version: [ 16.x ]

    steps:
      - name: Checkout source files
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
          
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}    
          
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
    
      - name: Cache NPM
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-
      
      - name: Install Widdershins
        run: npm install -g widdershins
        
      - name: Convert swagger to markdown
        run: widdershins swagger.json --language_tabs shell:Shell http:HTTP javascript:JS php:PHP csharp:C# java:Java -o ./slate/source/index.html.md          

      #- name: Set up Ruby  ${{ matrix.ruby-version }}
      #  uses: ruby/setup-ruby@v1
      #  with:
      #    ruby-version: ${{ matrix.ruby-version }}
      #      
      #- name: Cache gems
      #  uses: actions/cache@v2
      #  with:
      #    path: vendor/bundle
      #    key: gems-${{ runner.os }}-${{ matrix.ruby-version }}-${{ hashFiles('slate/Gemfile.lock') }}
      #    restore-keys: |
      #      gems-${{ runner.os }}-${{ matrix.ruby-version }}-
      #      gems-${{ runner.os }}-
      #      
      #- name: Set bundle to deployment mode
      #  run: bundle config set deployment 'true'
      #  
      #- name: bundle install
      #  run: |
      #    bundle config path vendor/bundle
      #    bundle install --gemfile ./slate/Gemfile --jobs 4 --retry 3
      #    
      #- name: Build source with middleman 
      #  run: |
      #    cd slate
      #    bundle exec middleman build --clean --build-dir ../mkdocs/docs/api      

      - name: Build Slate
        uses: docker://slatedocs/slate:latest
        with:     
          options: -v ${{ github.workspace }}/mkdocs/docs/api:/srv/slate/build -v ${{ github.workspace }}/slate/source:/srv/slate/source
          args: build
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64          
          
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('mkdocs/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
            
      - name: Install Python dependencies
        run: python3 -m pip install -r ./mkdocs/requirements.txt

      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
                
      - name: Deploy MkDoc with mike ðŸš€
        run: |
          cd mkdocs
          mike deploy --push dev